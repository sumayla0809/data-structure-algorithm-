
#include <iostream>
#include<vector>

using namespace std;
class TreeNode
{
public:
    int data;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int data)
    {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};


pair<int, int> predecessorSuccessor(TreeNode *root, int key)
{
    // find key
    TreeNode *temp = root;
    int pre = -1;
    int succ = -1;
    while (temp != NULL && temp->data != key)
    {
        if (temp->data > key)
        {
            succ = temp->data;
            temp = temp->left;
        }
        else
        {
            pre = temp->data;
            temp = temp->right;
        }
    }
    if (temp == NULL)
    {
        return {pre, succ}; // key not found, return current best guesses
    }
    // predeccesor and successor
    // pre
    TreeNode *leftTree = temp->left;
    while (leftTree != NULL)
    {
        pre = leftTree->data;
        leftTree = leftTree->right;
    }
    // secc
    TreeNode *rightTree = temp->right;
    while (rightTree != NULL)
    {
        succ = rightTree->data;
        rightTree = rightTree->left;
    }

    pair<int, int> ans = make_pair(pre, succ);
    return ans;
}
int main (){


    return 0;

}
