// ? INORDER Traversal to store elements in sorted order
void inorder(TreeNode* root , vector<int>& in ){
    if(root == NULL){
        return;
    }
    inorder(root->left , in);
    in.push_back(root->data);
    inorder(root->right , in);
}

// ? Merge two sorted arrays
vector<int> mergeArrays(vector<int>& a , vector<int>& b){
    vector<int> ans(a.size() + b.size());
    int i = 0 , j = 0 ,  k = 0;

    while (i < a.size() && j < b.size()){
        if(a[i] < b[j]){
            ans[k++] = a[i++];
        }
        else{
            ans[k++] = b[j++];
        }
    }
    while(i < a.size()){
        ans[k++] = a[i++];
    }
    while(j < b.size()){
        ans[k++] = b[j++];
    }
    return ans;
}

// ? Build BST from sorted array (inorder)
TreeNode* inordertoBST(int s , int e , vector<int>& in){
    if(s > e){
        return NULL;
    }
    int mid = (s + e) / 2;
    TreeNode* root = new TreeNode(in[mid]);  // ? NO <int> here

    root->left = inordertoBST(s , mid - 1 , in);
    root->right = inordertoBST(mid + 1 , e , in);
    return root;
}

// ? Main function to merge BSTs
vector<int> mergeBST(TreeNode* root1, TreeNode* root2)
{
    vector<int> bst1, bst2;

    inorder(root1 , bst1);
    inorder(root2 , bst2);

    vector<int> mergeArray = mergeArrays(bst1 , bst2);


    return mergeArray;  // ? This returns TreeNode*
}
