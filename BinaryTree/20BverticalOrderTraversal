#include <iostream>
#include <vector>
#include <queue>
#include <map>
using namespace std;
class Node
{
public:
    int data;
    Node *left;
    Node *right;
    Node(int d)
    {
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};
vector<vector<int>> verticalOrder(Node *root)
{
    // Your code here 
    map<int, map<int, vector<int>>> Nodes;
    queue<pair<Node *, pair<int, int>>> q;
    vector<vector<int>> ans;

    if (root == NULL)
    {
        return ans;
    }
    q.push(make_pair(root, make_pair(0, 0))); 
    while (!q.empty())
    {
        pair<Node *, pair<int, int>> temp = q.front();
        q.pop();
        Node *frontNode = temp.first;
        int hd = temp.second.first;
        int lvl = temp.second.second;

        Nodes[hd][lvl].push_back(frontNode->data);
        if (frontNode->left)
            q.push(make_pair(frontNode->left, make_pair(hd - 1, lvl + 1)));
        if (frontNode->right)
            q.push(make_pair(frontNode->right, make_pair(hd + 1, lvl + 1)));
    }
    for (auto i : Nodes)
    {
        vector<int> col;
        for (auto j : i.second)
        {
            for (auto k : j.second)
            {
                col.push_back(k);
            }
        }
        ans.push_back(col);
    }

    return ans;
}
int main()
{
    Node *root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    vector<vector<int>> result = verticalOrder(root);
    cout << "The vertical order is: " << endl;
    for (const auto &col : result)
    {
        for (int val : col)
        {
            cout << val << " ";
        }
        cout << endl;
    }

    return 0;
}
