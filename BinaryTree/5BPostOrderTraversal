#include <iostream>
#include <queue>
using namespace std;
class node
{
public:
    int data;
    node *left;
    node *right;
    node(int d)
    {
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};
node *buildTree(node *root)
{
    cout << " enter the data :" << endl;
    int data;
    cin >> data;
    if (data == -1)
        return NULL; // pehele check kro  -1 to nhi hai

    root = new node(data); // fer node banyo
    cout << " enter data  for inserting in left " << data << endl;
    root->left = buildTree(root->left);
    cout << " enter data  for inserting in right " << data << endl;
    root->right = buildTree(root->right);
    return root;
}

void LevelOrderTraversal(node *root)
{
    queue<node *> q;
    q.push(root);
    q.push(NULL);
    while (!q.empty())
    {
        node *temp = q.front();
        q.pop();
        if (temp == NULL)
        { // purana level complete travers ho chuka hai
            cout << endl;
            if (!q.empty())
            {
                // queue still has some child nodes
                q.push(NULL);
            }
        }
        else
        {
            cout << temp->data << " ";

            if (temp->left)
            {
                q.push(temp->left);
            }
            if (temp->right)
            {
                q.push(temp->right);
            }
        }
    }
}
void Inorder(node *root)
{
    // base case
    if (root == NULL)
    {
        return;
    }
    Inorder(root->left);
    cout << root->data << " ";
    Inorder(root->right);
}
void Preorder(node *root)
{
    // base case
    if (root == NULL)
    {
        return;
    }
    cout << root->data << " ";
    Preorder(root->left);
    Preorder(root->right);
}
void postOrder(node *root)
{
    // base case
    if (root == NULL)
    {
        return;
    }
    postOrder(root->left);
    postOrder(root->right);
    cout << root->data << " ";
}

int main()
{
    node *root = NULL;
    // creating a Tree
    root = buildTree(root);
    // 1 ,3, 7, -1, -1, 11,,-1,-1 , 5 , 17 , -1 , -1 , -1;
    //  level order traversal
    cout << " printing the levelorder traversal output " << endl;
    LevelOrderTraversal(root);
    cout << "inorder traversal is :" << endl;
    Inorder(root);
    cout << " PreOrder Traversal is " << endl;
    Preorder(root);
    return 0;
}
