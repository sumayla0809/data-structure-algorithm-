#include <iostream>
#include <vector>

using namespace std;
class node
{
public:
    int data;
    node *left;
    node *right;
    node(int d)
    {
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};
void traversLeft(node *root, vector<int> &ans)
{
    if (root == NULL)
    {
        return;
    }
    if (root->left == NULL && root->right == NULL)
    {
        return;
    }
    ans.push_back(root->data);
    if (root->left)
    {
        traversLeft(root->left, ans);
    }
    else
    {
        traversLeft(root->right, ans);
    }
}
void traversLeaf(node *root, vector<int> &ans)
{
    if (root == NULL)
    {
        return;
    }
    if (root->left == NULL && root->right == NULL)
    {
        ans.push_back(root->data);
        return;
    }

    traversLeaf(root->left, ans);
    traversLeaf(root->right, ans);
}
void traversRight(node *root, vector<int> &ans)
{
    if (root == NULL)
    {
        return;
    }
    if (root->left == NULL && root->right == NULL)
    {
        return;
    }
    if (root->right)
    {
        traversRight(root->right, ans);
    }
    else
    {

        traversRight(root->left, ans);
    }
    ans.push_back(root->data);
}

vector<int> boundaryTraversal(node *root)
{
    vector<int> ans;
    if (root == NULL)
    {
        return ans;
    }
    ans.push_back(root->data);
    // left part print and store
    traversLeft(root->left, ans);
    // traverse leaf node
    // left subtree
    traversLeaf(root->left, ans);
    // right subtree
    traversLeaf(root->right, ans);
    // traverse right bala part
    traversRight(root->right, ans);
    return ans;
}
int main()
{
    node *root = new node(1);
    root->left = new node(2);
    root->right = new node(3);
    root->left->left = new node(4);
    root->left->right = new node(5);
    root->right->left = new node(6);
    root->right->right = new node(7);
    vector<int> result = boundaryTraversal(root);
    cout
        << "boundry condition traversal  of tree";
    for (int i = 0; i < result.size(); i++)
    {
        cout << result[i] << " ";
    }
    cout << endl;
    return 0;
}
