#include <iostream>
#include <queue>
#include <vector>
using namespace std;
class node
{
public:
    int data;
    node *left;
    node *right;
    node(int d)
    {
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};
vector<int> zigZagTraversal(node *root)
{
    // Code here
    vector<int> result;
    if (root == NULL)
    {
        return result;
    }
    queue<node *> q;
    q.push(root);
    bool lefttoRight = true;
    while (!q.empty())
    {
        int size = q.size();
        vector<int> ans(size);
        // level procces
        for (int i = 0; i < size; i++)
        {
            node *FrontNode = q.front();
            q.pop();
            int index = lefttoRight ? i : size - i - 1;
            ans[index] = FrontNode->data;
            if (FrontNode->left)
            {
                q.push(FrontNode->left);
            }
            if (FrontNode->right)
            {
                q.push(FrontNode->right);
            }
        }
        //  direction chnage krni hai
        lefttoRight = !lefttoRight;

        for (auto i : ans)
        {
            result.push_back(i);
        }
    }
    return result;
}
int main()
{
    node *root = new node(1);
    root->left = new node(2);
    root->right = new node(3);
    root->left->left = new node(4);
    root->left->right = new node(5);
    root->right->left = new node(6);
    root->right->right = new node(7);
    vector<int> result = zigZagTraversal(root);
    cout << "zig zag trversal of tree";
    for (int i = 0; i < result.size(); i++)
    {
        cout << result[i] << " ";
    }
    cout << endl;
    return 0;
}
