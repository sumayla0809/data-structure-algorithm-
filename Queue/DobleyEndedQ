#include <iostream>
#include <deque>
using namespace std;
class Deque
{
    int *arr;
    int front;
    int rear;
    int size;

public:
    // Initialize your data structure.
    Deque(int n)
    {
        size = n;
        arr = new int[n];
        rear = -1;
        front = -1;
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x)
    {
        // check full
        if ((front == 0 && rear == size - 1) || (rear == (front - 1 + size) % size))
        {
            return false;
        }
        else if (front == -1)
        {
            front = rear = 0;
        }
        else if (front == 0 && rear != size - 1)
        {
            front = size - 1;
        }
        else
        {
            front--;
        }
        arr[front] = x;
        return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushRear(int x)
    {
        if ((front == 0 && rear == size - 1) || (rear == (front - 1 + size) % size))
        {
            return false;
        }
        else if (front == -1)
        {
            front = 0;
            rear = 0;
        }
        else if (rear == size - 1 && front != 0)
        {
            rear = 0;
        }
        else
        {
            rear++;
        }
        arr[rear] = x;
        return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popFront()
    {
        if (front == -1)
        { // to check queue is empty
            return -1;
        }
        int ans = arr[front];
        if (front == rear)
        {
            front = rear = -1;
        }
        else if (front == size - 1)
        {
            front = 0; // to maintain cycle nature
        }
        else
        {
            front++;
        }
        return ans;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popRear()
    {
        if (front == -1)
        { // to check queue is empty
            return -1;
        }
        int ans = arr[rear];
        arr[rear] = -1;
        if (front == rear)
        {
            front = rear = -1;
        }
        else if (rear == 0)
        {
            rear = size - 1; // to maintain cycle nature
        }
        else
        {
            rear--;
        }
        return ans;
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    int getFront()
    {
        if (isEmpty())
        {
            return -1;
        }
        return arr[front];
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    int getRear()
    {
        if (isEmpty())
        {
            return -1;
        }
        return arr[rear];
    }

    // Returns true if the deque is empty. Otherwise returns false.
    bool isEmpty()
    {
        if (front == -1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    // Returns true if the deque is full. Otherwise returns false.
    bool isFull()
    {
        if ((front == 0 && rear == size - 1) || (rear == (front - 1 + size) % size))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
};
#include <iostream>
using namespace std;

// Your Deque class should be above this (already written)

int main()
{
    Deque d(3); // size 3 ka deque banaya

    d.pushRear(10);
    d.pushFront(5);
    d.pushRear(15);

    cout << "Front: " << d.getFront() << endl; // 5
    cout << "Rear: " << d.getRear() << endl;   // 15

    cout << "Pop front: " << d.popFront() << endl; // 5
    cout << "Pop rear: " << d.popRear() << endl;   // 15

    cout << "Front: " << d.getFront() << endl; // 10
    cout << "Is Empty? " << (d.isEmpty() ? "Yes" : "No") << endl;

    return 0;
}
