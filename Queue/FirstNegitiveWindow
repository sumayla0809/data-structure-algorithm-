#include <iostream>
#include <vector>
#include <deque>
using namespace std;
vector<int> firstNegInt(vector<int> &arr, int k)
{
    int n = arr.size();
    deque<int> dq;
    vector<int> ans;
    // process first window of k size
    for (int i = 0; i < k; i++)
    {
        if (arr[i] < 0)
        {
            dq.push_back(i);
        }
    }
    // store answer of first k sized window
    if (dq.size() > 0)
    {
        ans.push_back(arr[dq.front()]);
    }
    else
    {
        ans.push_back(0);
    }
    // process for remaing window
    for (int i = k; i < n; i++)
    {
        // removal
        if (!dq.empty() && i - dq.front() >= k)
        {
            dq.pop_front();
        }
        // addition
        if (arr[i] < 0)
        {
            dq.push_back(i);
        }
        // ans store
        if (dq.size() > 0)
        {
            ans.push_back(arr[dq.front()]);
        }
        else
        {
            ans.push_back(0);
        }
    }
    return ans;
}
int main()
{
    vector<int> q;

    // Proper way to push elements into the queue
    q.push_back(1);
    q.push_back(-2);
    q.push_back(-3);
    q.push_back(5);
    q.push_back(6);

    int k = 2;

    vector<int> result = firstNegInt(q, k);

    // Print the result
    for (int num : result)
    {
        cout << num << " ";
    }
    return 0;
}
