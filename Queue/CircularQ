#include <iostream>
#include<queue>
using namespace std;
class CircularQueue
{
    int *arr;
    int front;
    int rear;
    int size;
public:
    // Initialize your data structure.
    CircularQueue(int n)
    {
        size = n;
        arr = new int[size];
        front = rear = -1;
    }

    // Enqueues 'X' into the queue. Returns true if it gets pushed into the stack, and false otherwise.
    bool enqueue(int value)
    {
        // to check wather queue is full
        if ((front == 0 && rear == size - 1) || (rear == (front - 1 + size) % size))
        {
            return false;
        }
        else if (front == -1)
        { // first element push
            front = rear = 0;
            arr[rear] = value;
        }
        else if (rear == size - 1 && front != 0)
        {
            rear = 0; // to maintain cycle nature
            arr[rear] = value;
        }
        else
        {
            rear++;
            arr[rear] = value;
        }
        return true;
    }

    // Dequeues top element from queue. Returns -1 if the stack is empty, otherwise returns the popped element.
    int dequeue()
    {
        if (front == -1)
        { // to check queue is empty
            return -1;
        }
        int ans = arr[front];
        if (front == rear)
        {
            front = rear = -1;
        }
        else if (front == size - 1)
        {
            front = 0; // to maintain cycle nature
        }
        else
        {
            front++;
        }
        return ans;
    }
};
int main()
{
    CircularQueue q(5); // Queue ka size 5 hai

    // Elements insert kar rahe hain
    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);

    // Ek element remove kar rahe hain
    int removed = q.dequeue();
    cout << "Dequeued element: " << removed << endl;

    // Do aur elements insert karte hain
    q.enqueue(40);
    q.enqueue(50);

    // Ek aur element dequeue
    removed = q.dequeue();
    cout << "Dequeued element: " << removed << endl;

    return 0;
}
