#include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *next = NULL;

    // constructor;
    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
};

Node *findmiddle(Node *&head)
{
    if (head == NULL || head->next == NULL)
    {
        return head;
    }
    Node *slow = head;
    Node *fast = head->next;
    while (fast != NULL)
    {
        fast = fast->next;
        if (fast != NULL)
        {
            fast = fast->next;
        }
        slow = slow->next;
    }
    return slow;
}
Node *merge(Node *left, Node *right)
{
    if (left == NULL)
    {
        return right;
    }
    if (right == NULL)
    {
        return left;
    }
    Node *ans = new Node(-1);
    Node *temp = ans;
    // merge to sorted linked list
    while (left != NULL && right != NULL)
    {
        if (left->data < right->data)
        {
            temp->next = left;
            temp = left;
            left = left->next;
        }
        else
        {
            temp->next = right;
            temp = right;
            right = right->next;
        }
    }
    while (left != NULL)
    {
        temp->next = left;
        temp = left;
        left = left->next;
    }
    while (right != NULL)
    {
        temp->next = right;
        temp = right;
        right = right->next;
    }
    ans = ans->next;
    return ans->next;
}

Node *mergesort(Node *head)
{
    // base case
    if (head == NULL || head->next == NULL)
    {
        return head;
    }
    // breaks linked list into 2 halves after finding mid
    Node *mid = findmiddle(head);
    Node *left = head;
    Node *right = mid->next;
    mid->next = NULL;
    // recursion calls to sort both halves
    left = mergesort(left);
    right = mergesort(right);
    // merge both left and right halves
    Node *result = merge(left, right);
    return result;
}
void print(Node *&head)
{
    Node *temp = head;
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main()
{
    Node *node1 = new Node(1);
    Node *node2 = new Node(0);
    Node *node3 = new Node(3);
    Node *node4 = new Node(7);
    Node *node5 = new Node(2);

    node1->next = node2;
    node2->next = node3;
    node3->next = node4;
    node4->next = node5;

    cout << "Original linked list: ";
    print(node1);

    node1 = mergesort(node1);

    cout << "Sorted linked list: ";
    print(node1);
    return 0;
}
