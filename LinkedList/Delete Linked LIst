#include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *next;

    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
    ~Node(){
        int value = this->data;
        if(this->next != NULL){
            delete next;
            this->next = NULL;
        }
        cout << " memory is free for node with data " << value << endl;

    }
};

void insertAtHead(Node *&head, int d)
{
    Node *temp = new Node(d);
    temp->next = head;
    head = temp;
}

void insertAtTail(Node *&tail, int d)
{
    Node *temp = new Node(d);
    tail->next = temp;
    tail = temp;
}

void insertAtMiddle(Node *&head, Node *&tail, int position, int d)
{
    if (position == 1)
    {
        insertAtHead(head, d);
        return;
    }

    Node *temp = head;
    int cnt = 1;

    while (cnt < position - 1 && temp->next != NULL)
    {
        temp = temp->next;
        cnt++;
    }

    if (temp->next == NULL)
    {
        insertAtTail(tail, d);
        return;
    }

    Node *nodeToInsert = new Node(d);
    nodeToInsert->next = temp->next;
    temp->next = nodeToInsert;
}
void deletePostion(Node*&head , int postion ){
    if(postion == 1){
        
       // delte first and strt node
       Node *temp = head;
       head = head->next;
       // memeory free strt node
       temp->next = NULL;
       delete temp;
    }
    else{
        // delteting any middle and last node
        Node *curr = head;
        Node *prev = NULL;
        int cnt = 1;
        while(cnt < postion-1){
            prev = curr;
            curr = curr->next;
            cnt++;
        }
        prev->next = curr->next;
        curr->next = NULL;
        delete curr;
    }
}
void print(Node *&head)
{
    Node *temp = head;
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main()
{
    Node *node1 = new Node(10); // âœ… declare first node first
    Node *head = node1;
    Node *tail = node1;

    print(head);           // 10
    insertAtHead(head, 5); // 5 10
    print(head);
    insertAtTail(tail, 20); // 5 10 20
    print(head);
    insertAtMiddle(head, tail, 1, 2); // 2 5 10 20
    print(head);

    return 0;
}
