class Solution {
public :
int firstOcuurance(vector<int>& nums, int target) {
        int n = nums.size();
        int s = 0;
        int e = n - 1;
        int ans = -1;
        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (nums[mid] == target) {
                ans = mid;
                e = mid - 1;
            } else if (nums[mid] > target) {
                e = mid - 1;
            } else {
                s = mid + 1;
            }
        }

        return ans;
    }

int lastOcuurance(vector<int>& nums, int target) {
    int n = nums.size();
        int s = 0;
        int e = n - 1;
        int ans = -1;
        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (nums[mid] == target) {
                ans = mid;
                s = mid+1;
            } else if (nums[mid] > target) {
                e = mid - 1;
            } else {
                s = mid + 1;
            }
        }

        return ans;
    }

    vector<int> targetIndices(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin() , nums.end());
        int first = firstOcuurance(nums , target );
        int last = lastOcuurance(nums , target);
        vector<int>result;
        if(first == -1){
            return  result;
        }
        for(int i = first ; i <= last ; i++){
            result.push_back(i);
        }
        return result ;
    }
};
